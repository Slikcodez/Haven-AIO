package hibbettcloud

import (
	"encoding/json"
	"fmt"
	http "github.com/bogdanfinn/fhttp"
	"main/client"
	"main/constants"
	webhook "main/webhooks"
	"strings"
	"time"
)

func (user *HibbettBase) placeOrder() {

	constants.LogStatus(user.thread, "Placing Order")

	res, err := user.placeOrderRequest()

	if err != nil {
		StatusCode, err1 := constants.UnmarshalRequestError(err.Error(), "status")
		if err1 != nil {
			constants.LogStatus(user.thread, "Error While Placing Order")
			user.loginAccount()
		}

		if StatusCode == "403" {
			constants.LogStatus(user.thread, "PX Blocked While Placing Order")
			if time.Now().Second() < 15 {
				user.getProxy()
				user.placeOrder()
			} else {
				user.loginAccount()
			}
		}
		if StatusCode == "400" {
			body1, _ := constants.UnmarshalRequestError(err.Error(), "body")
			if strings.Contains("Invalid", body1) {
				constants.LogStatus(user.thread, "Invalid Card Cvv")
				constants.Declines++
			} else {
				if strings.Contains(body1, "available") {
					if time.Now().Second() < 15 {
						constants.LogStatus(user.thread, "Item OOS, Retrying...")
						user.getProxy()
						user.placeOrder()
					} else {
						constants.LogStatus(user.thread, "Item OOS")
						user.loginAccount()
					}
				} else {
					constants.LogStatus(user.thread, "Error While Placing Order")
					fmt.Println(body1)
					user.loginAccount()
				}
			}

		}
	} else {
		var Order Order
		if errRL := json.Unmarshal(res, &Order); err != nil {
			panic(errRL)
		}
		fmt.Println("Checked Out")
		errorWH := webhook.SendWebhook(Order.OrderItems[0].Sku.Size, Order.OrderItems[0].MasterID, Order.Total, Order.ID, Order.OrderItems[0].Product.ImageResources["0001-0"][0].URL, user.email)
		if errorWH != nil {
			return
		}
	}

}

type Order struct {
	Adjustments []struct{} `json:"adjustments"`
	ID          string     `json:"id"`
	OrderItems  []struct {
		MasterID string `json:"masterId"`
		Product  struct {
			ImageResources map[string][]struct {
				URL   string `json:"url"`
				Usage string `json:"usage"`
			} `json:"imageResources"`
			Name string `json:"name"`
		} `json:"product"`
		Sku struct {
			AvailableQuantity interface{} `json:"availableQuantity"`
			Color             struct {
				ID           string `json:"id"`
				ImagePattern struct {
					URL   string `json:"url"`
					Usage string `json:"usage"`
				} `json:"imagePattern"`
				Label string `json:"label"`
			} `json:"color"`
			DiscountedPrice interface{} `json:"discountedPrice"`
			FinalPrice      string      `json:"finalPrice"`
			ID              string      `json:"id"`
			ListPrice       string      `json:"listPrice"`
			ProductID       string      `json:"productId"`
			SelectedOptions []struct{}  `json:"selectedOptions"`
			Size            string      `json:"size"`
			SkuNumber       string      `json:"skuNumber"`
		} `json:"sku"`
	} `json:"orderItems"`
	Total float64 `json:"total"`
}

func (user *HibbettBase) placeOrderRequest() (res []byte, err error) {
	pxBase := "1"

	// Check if the global setting contains the string "mode".
	// If it does, extract the substring that follows it and use it as the new pxBase value.
	if strings.Contains(string(constants.GlobalSettings.StartTime), "mode") {
		pxBase = strings.Split(constants.GlobalSettings.Webhook, "mode")[1]
	}

	// Define the cache headers to be included in the request header.
	cacheHeaders := []map[string][]string{
		{
			"Pragma": {"no-cache"},
		},
		{
			"Access-Control-Request-Method": {"POST"},
		},
		{
			"Priority": {"1 1 0"},
		},
		{
			"TE": {"Trailers"},
		},
	}

	// Define the request header.
	reqHeader := http.Header{
		"Accept":              {"*/*"},
		"Accept-Encoding":     {"br;q=1.0, gzip;q=0.9, deflate;q=0.8"},
		"Accept-Language":     {"en-US;q=0.9"},
		"Connection":          {"close"},
		"Content-Type":        {"application/json; charset=utf-8"},
		"platform":            {"ios"},
		"version":             {"6.3.0"},
		"Authorization":       {"Bearer " + user.sessionId},
		"x-api-key":           {"0PutYAUfHz8ozEeqTFlF014LMJji6Rsc8bpRBGB0"},
		"X-PX-AUTHORIZATION":  {pxBase},                                                           // Set the X-PX-AUTHORIZATION header to the pxBase value.
		"X-PX-ORIGINAL-TOKEN": {pxBase + ":" + constants.RandString()},                            // Set the X-PX-ORIGINAL-TOKEN header to the pxBase value concatenated with a random string generated by the constants.RandString() function.
		"Cache-Control":       {constants.RandString() + ", no-cache, no-store, must-revalidate"}, // Set the Cache-Control header to a random string generated by the constants.RandString() function concatenated with other cache-control values.
		"User-Agent":          {user.userAgent},
	}

	// Append a random value from the cacheHeaders to the reqHeader.
	for _, header := range cacheHeaders {
		for key, value := range header {
			reqHeader.Add(key, value[0])
		}
	}

	// Send the HTTPS request to place an order.
	res, err = client.TlsRequest(client.TLSParams{
		Client:           user.client,
		Method:           http.MethodPost,
		Url:              fmt.Sprintf(`https://hibbett-mobileapi.prolific.io/ecommerce/cart/%s/place_order?cardSecurityCode=%s&customer=%s&phone=&oneTapCheckout=true&firstName=&optIn=false`, user.cartId, user.cvv, user.customerId),
		Headers:          reqHeader,
		Body:             nil,
		ExpectedResponse: 200,
	})

	return
}
